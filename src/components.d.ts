/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import { HTMLStencilElement, JSXBase } from '@stencil/core/internal';
import {
  ButtonType,
  ControlSize,
} from './components/health-button/health-button.types';
import {
  CustomMouseEvent,
} from './custom.types';
import {
  DropdownAlignConfig,
} from './components/health-dropdown/health-dropdown.types';

export namespace Components {
  interface ClickAway {
    'onClickAway': () => void;
  }
  interface HealthButton {
    'disabled': boolean;
    'name': string;
    'size': ControlSize;
    'type': ButtonType;
  }
  interface HealthDropdown {
    'alignConfig': DropdownAlignConfig;
    'container': HTMLElement;
    'open': boolean;
  }
  interface HealthInput {}
  interface HealthMenu {
    'open': boolean;
    'setOpenMenu': () => Promise<void>;
  }
  interface HealthToggleMenu {
    'options': string;
    'test': () => void;
  }
}

declare global {


  interface HTMLClickAwayElement extends Components.ClickAway, HTMLStencilElement {}
  var HTMLClickAwayElement: {
    prototype: HTMLClickAwayElement;
    new (): HTMLClickAwayElement;
  };

  interface HTMLHealthButtonElement extends Components.HealthButton, HTMLStencilElement {}
  var HTMLHealthButtonElement: {
    prototype: HTMLHealthButtonElement;
    new (): HTMLHealthButtonElement;
  };

  interface HTMLHealthDropdownElement extends Components.HealthDropdown, HTMLStencilElement {}
  var HTMLHealthDropdownElement: {
    prototype: HTMLHealthDropdownElement;
    new (): HTMLHealthDropdownElement;
  };

  interface HTMLHealthInputElement extends Components.HealthInput, HTMLStencilElement {}
  var HTMLHealthInputElement: {
    prototype: HTMLHealthInputElement;
    new (): HTMLHealthInputElement;
  };

  interface HTMLHealthMenuElement extends Components.HealthMenu, HTMLStencilElement {}
  var HTMLHealthMenuElement: {
    prototype: HTMLHealthMenuElement;
    new (): HTMLHealthMenuElement;
  };

  interface HTMLHealthToggleMenuElement extends Components.HealthToggleMenu, HTMLStencilElement {}
  var HTMLHealthToggleMenuElement: {
    prototype: HTMLHealthToggleMenuElement;
    new (): HTMLHealthToggleMenuElement;
  };
  interface HTMLElementTagNameMap {
    'click-away': HTMLClickAwayElement;
    'health-button': HTMLHealthButtonElement;
    'health-dropdown': HTMLHealthDropdownElement;
    'health-input': HTMLHealthInputElement;
    'health-menu': HTMLHealthMenuElement;
    'health-toggle-menu': HTMLHealthToggleMenuElement;
  }
}

declare namespace LocalJSX {
  interface ClickAway extends JSXBase.HTMLAttributes<HTMLClickAwayElement> {
    'onClickAway'?: () => void;
  }
  interface HealthButton extends JSXBase.HTMLAttributes<HTMLHealthButtonElement> {
    'disabled'?: boolean;
    'name'?: string;
    'onHealthButton'?: (event: CustomEvent<CustomMouseEvent>) => void;
    'size'?: ControlSize;
    'type'?: ButtonType;
  }
  interface HealthDropdown extends JSXBase.HTMLAttributes<HTMLHealthDropdownElement> {
    'alignConfig'?: DropdownAlignConfig;
    'container'?: HTMLElement;
    'open'?: boolean;
  }
  interface HealthInput extends JSXBase.HTMLAttributes<HTMLHealthInputElement> {}
  interface HealthMenu extends JSXBase.HTMLAttributes<HTMLHealthMenuElement> {
    'open'?: boolean;
  }
  interface HealthToggleMenu extends JSXBase.HTMLAttributes<HTMLHealthToggleMenuElement> {
    'onToggleMenuItemSelect'?: (event: CustomEvent<CustomMouseEvent>) => void;
    'options'?: string;
    'test'?: () => void;
  }

  interface IntrinsicElements {
    'click-away': ClickAway;
    'health-button': HealthButton;
    'health-dropdown': HealthDropdown;
    'health-input': HealthInput;
    'health-menu': HealthMenu;
    'health-toggle-menu': HealthToggleMenu;
  }
}

export { LocalJSX as JSX };


declare module "@stencil/core" {
  export namespace JSX {
    interface IntrinsicElements extends LocalJSX.IntrinsicElements {}
  }
}


